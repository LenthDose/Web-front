{"remainingRequest":"C:\\Users\\Silhouette76\\Desktop\\Web-front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Silhouette76\\Desktop\\Web-front\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Silhouette76\\Desktop\\Web-front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Silhouette76\\Desktop\\Web-front\\src\\views\\Home.vue?vue&type=template&id=fae5bece&lang=true&","dependencies":[{"path":"C:\\Users\\Silhouette76\\Desktop\\Web-front\\src\\views\\Home.vue","mtime":1640742069900},{"path":"C:\\Users\\Silhouette76\\Desktop\\Web-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1638098759177},{"path":"C:\\Users\\Silhouette76\\Desktop\\Web-front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1638098761981},{"path":"C:\\Users\\Silhouette76\\Desktop\\Web-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1638098759177},{"path":"C:\\Users\\Silhouette76\\Desktop\\Web-front\\node_modules\\vue-loader\\lib\\index.js","mtime":1638098761214}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}